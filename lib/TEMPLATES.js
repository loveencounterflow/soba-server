// Generated by CoffeeScript 1.8.0
(function() {
  var TEACUP, TRM, name_, rpr;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  TEACUP = require('coffeenode-teacup');

  for (name_ in TEACUP) {
    eval("" + name_ + " = TEACUP[ " + (rpr(name_)) + " ]");
  }

  this.monitor = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('SoBa ソバ Monitor');
            LINK({
              rel: 'shortcut icon',
              href: '/public/favicon.ico?v6'
            });
            LINK({
              rel: 'stylesheet',
              href: '/common/html5doctor-css-reset.css?v6'
            });
            SCRIPT({
              type: 'text/javascript',
              src: '/common/jquery-2.1.3.js'
            });
            SCRIPT({
              src: '/socket.io/socket.io.js'
            });
            return STYLE("body {\n  background-image:   url(./public/soba-logo.png);\n  background-repeat:  no-repeat;\n  padding:            1em;\n}\n#client-id {\n  // text-align:         right;\n  padding:            1em;\n  margin-top:         1em;\n  margin-bottom:      1em;\n  background-color:   rgba( 255, 255, 255, 0.5 );\n  width:              80%;\n  min-height:         1em;\n  border: 1px solid red;\n}\n#news {\n  padding:            1em;\n  margin-top:         1em;\n  margin-bottom:      1em;\n  background-color:   rgba( 255, 255, 255, 0.5 );\n  width:              80%;\n  min-height:         1em;\n  border: 1px solid blue;\n}");
          });
          return BODY(function() {
            H1("SoBa ソバ Monitor");
            DIV('#client-id');
            DIV('#news');
            COFFEESCRIPT(function() {
              var emit, log, publish_client_id, publish_news, scroll, socket;
              log = console.log.bind(console);
              rpr = JSON.stringify.bind(JSON);
              socket = io();
              emit = function(type, data) {
                publish_news('sent-event', {
                  type: type,
                  data: data
                });
                return socket.emit(type, data);
              };
              scroll = function() {
                return ($('html, body')).stop().animate({
                  scrollTop: ($('#bottom')).offset().top
                }, 2000);
              };
              publish_news = function(topic, data) {
                var delta, message, type, value, x, _ref, _ref1;
                log('©4363t2', rpr((function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = arguments.length; _i < _len; _i++) {
                    x = arguments[_i];
                    _results.push(x);
                  }
                  return _results;
                }).apply(this, arguments)));
                switch (topic) {
                  case 'received-event':
                    _ref = data, type = _ref.type, data = _ref.data;
                    switch (type) {
                      case 'helo':
                        message = "received event: type \"helo\"; updated client ID";
                        break;
                      default:
                        if (data != null) {
                          message = "received event: type " + (rpr(type)) + "; " + (rpr(data));
                        } else {
                          message = "received event: type " + (rpr(type));
                        }
                    }
                    break;
                  case 'client-count':
                    value = data.value, delta = data.delta;
                    if (delta > 0) {
                      message = "client count now up to " + value;
                    } else {
                      message = "client count now down to " + value;
                    }
                    break;
                  case 'sent-event':
                    _ref1 = data, type = _ref1.type, data = _ref1.data;
                    if (data != null) {
                      message = "sent event: type " + (rpr(type)) + "; " + (rpr(data));
                    } else {
                      message = "sent event: type " + (rpr(type));
                    }
                    break;
                  default:
                    message = "topic: " + topic + ", data: " + (rpr(data));
                }
                return ($('#news')).append(($('<div></div>')).text(message));
              };
              publish_client_id = function(data) {
                var x;
                log('©kl62m', rpr((function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = arguments.length; _i < _len; _i++) {
                    x = arguments[_i];
                    _results.push(x);
                  }
                  return _results;
                }).apply(this, arguments)));
                return ($('#client-id')).append(($('<div></div>')).text("Client-ID: " + data['client-id']));
              };
              socket.on('news', publish_news);
              socket.on('helo', publish_client_id);
              emit('helo');
              emit('foo', 42);
              return emit('bar', {
                baz: true
              });
            });
            return DIV('#bottom');
          });
        });
      };
    })(this));
  };

}).call(this);
