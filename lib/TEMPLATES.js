// Generated by CoffeeScript 1.8.0
(function() {
  var TEACUP, TRM, name_, rpr;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  TEACUP = require('coffeenode-teacup');

  for (name_ in TEACUP) {
    eval("" + name_ + " = TEACUP[ " + (rpr(name_)) + " ]");
  }

  this.monitor = function() {
    return render((function(_this) {
      return function() {
        DOCTYPE(5);
        return HTML(function() {
          HEAD(function() {
            META({
              charset: 'utf-8'
            });
            TITLE('SoBa ソバ Monitor');
            LINK({
              rel: 'shortcut icon',
              href: '/public/favicon.ico?v6'
            });
            LINK({
              rel: 'stylesheet',
              href: '/common/html5doctor-css-reset.css?v6'
            });
            SCRIPT({
              type: 'text/javascript',
              src: '/common/jquery-2.1.3.js'
            });
            SCRIPT({
              src: '/socket.io/socket.io.js'
            });
            return STYLE("body {\n  background-image:         url(./public/soba-logo.png);\n  background-repeat:        no-repeat;\n  padding:                  1em;\n  background-attachment:    fixed;\n  background-size:          100% auto;\n  -webkit-background-size:  100% auto;\n}\n#client-id {\n  // text-align:         right;\n  padding:            1em;\n  margin-top:         1em;\n  margin-bottom:      1em;\n  background-color:   rgba( 255, 255, 255, 0.5 );\n  width:              80%;\n  min-height:         1em;\n  border: 1px solid red;\n}\n#news {\n  padding:            1em;\n  margin-top:         1em;\n  margin-bottom:      1em;\n  background-color:   rgba( 255, 255, 255, 0.5 );\n  width:              80%;\n  min-height:         1em;\n  border: 1px solid blue;\n}");
          });
          return BODY(function() {
            H1("SoBa ソバ Monitor");
            DIV('#client-id');
            DIV('#news');
            COFFEESCRIPT(function() {
              return ($('document')).ready(function() {
                var emit, log, publish_client_id, publish_news, scroll_to_bottom, socket;
                log = console.log.bind(console);
                rpr = JSON.stringify.bind(JSON);
                socket = io();
                emit = function(type, data) {
                  publish_news('sent-event', {
                    type: type,
                    data: data
                  });
                  return socket.emit(type, data);
                };
                scroll_to_bottom = function() {
                  return ($('html, body')).stop().animate({
                    scrollTop: ($('#bottom')).offset().top
                  }, 500);
                };
                publish_news = function(topic, data) {
                  var delta, message, type, value, _ref, _ref1;
                  switch (topic) {
                    case 'received-event':
                      _ref = data, type = _ref.type, data = _ref.data;
                      if (data != null) {
                        message = "server received: type " + (rpr(type)) + "; " + (rpr(data));
                      } else {
                        message = "server received: type " + (rpr(type));
                      }
                      break;
                    case 'updated-client-id':
                      message = "updated client ID: " + (rpr(data));
                      break;
                    case 'client-count':
                      value = data.value, delta = data.delta;
                      if (delta > 0) {
                        message = "client count: up to " + value;
                      } else {
                        message = "client count: down to " + value;
                      }
                      break;
                    case 'sent-event':
                      _ref1 = data, type = _ref1.type, data = _ref1.data;
                      if (data != null) {
                        message = "client sent: type " + (rpr(type)) + "; " + (rpr(data));
                      } else {
                        message = "client sent: type " + (rpr(type));
                      }
                      break;
                    default:
                      message = "topic: " + topic + ", data: " + (rpr(data));
                  }
                  ($('#news')).append(($('<div></div>')).text(message));
                  return scroll_to_bottom();
                };
                publish_client_id = function(data) {
                  ($('#client-id')).append(($('<div></div>')).text("Client-ID: " + data['client-id']));
                  publish_news('updated-client-id', data['client-id']);
                  return scroll_to_bottom();
                };
                socket.on('news', publish_news);
                socket.on('helo', publish_client_id);
                return socket.on('connect', (function(_this) {
                  return function() {
                    return emit('helo');
                  };
                })(this));
              });
            });
            return DIV('#bottom');
          });
        });
      };
    })(this));
  };

}).call(this);
